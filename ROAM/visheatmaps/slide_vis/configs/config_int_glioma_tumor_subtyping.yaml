# CUDA_VISIBLE_DEVICES=0,1 python create_heatmaps.py --config config_template.yaml
--- 
exp_arguments:
  # number of classes, depends on the classification task
  n_classes: 2
  # where to save raw asset files
  raw_save_dir: visheatmaps/slide_vis/results/heatmap_raw_results
  # where to save final heatmaps
  production_save_dir: visheatmaps/slide_vis/results/heatmap_production_results
data_arguments: 
  # where is data stored; can be a single str path or a dictionary of key, data_dir mapping
  data_dir: heatmaps/demo/slides/
  # csv list containing slide_ids (can additionally have seg/patch paramters, class labels, etc.)
  process_list: int_glioma_tumor_subtyping.csv

# arguments of ROAM model
model_arguments:
  task: int_glioma_tumor_subtyping
  seed: 1
  batch_size: 4
  exp_code: int_idh_cls_[2, 2, 2, 2, 2]_ImageNet_4_True_True_1.0_4_0_ms_0_False
  embed_type: ImageNet
  sample_size: 100
  not_stainnorm: False
  test_dataset: xiangya
  results_dir: results

  emb_dropout: 0
  attn_dropout: 0.25
  dropout: 0.2

  model_type: ROAM
  roi_dropout: True
  roi_supervise: True
  roi_weight: 1.0
  topk: 4
  roi_level: 0
  scale_type: ms
  single_level: 0
  embed_weightx5: 0.3333
  embed_weightx10: 0.3333
  embed_weightx20: 0.3333
  not_interscale: False

  dim: 256
  depths: [2,2,2,2,2]
  heads: 8
  mlp_dim: 512
  dim_head: 64
  pool: cls
  ape: True
  attn_type: rel_sa
  shared_pe: True


patching_arguments:
  # arguments for patching
  patch_size: 4096
  overlap: 0.9
  patch_level: 0
  custom_downsample: 1
  # for stain normalization
  target_image_dir: visheatmaps/target_roi_6e3.jpg

heatmap_arguments:
  # downsample at which to visualize heatmap (-1 refers to downsample closest to 32x downsample)
  vis_level: 4
  # transparency for overlaying heatmap on background (0: background only, 1: foreground only)
  alpha: 0.4
  # whether to use a blank canvas instead of original slide
  blank_canvas: false
  # whether to also save the original H&E image
  save_orig: true
  # file extension for saving heatmap/original image
  save_ext: jpg
  # whether to calculate percentile scores in reference to the set of non-overlapping patches
  use_ref_scores: True
  # whether to use gaussian blur for further smoothing
  blur: True
  # whether to shift the 4 default corner points for checking if a patch is inside a foreground contour
  use_center_shift: true
  # whether to only compute heatmap for ROI specified by x1, x2, y1, y2
  use_roi: false 
  # whether to calculate heatmap with specified overlap (by default, coarse heatmap without overlap is always calculated)
  calc_heatmap: true
  # whether to binarize attention scores
  binarize: false
  # binarization threshold: (0, 1)
  binary_thresh: -1
  # factor for downscaling the heatmap before final dispaly
  custom_downsample: 1
  cmap: jet
sample_arguments:
  samples:
    - name: "topk_high_attention"
      sample: true
      seed: 1
      k: 10 # save top-k patches
      mode: topk
    - name: "topk_low_attention"
      sample: true
      seed: 1
      k: 5 # save top-k patches
      mode: reverse_topk
    # - name: "random_attention"
    #   sample: true
    #   seed: 1
    #   k: 5 # save top-k patches
    #   mode: range_sample



